@model IEnumerable<dotnet_store.Models.Order>

<section class="py-5">
    <div class="container">
        <div class="card border-0 shadow-sm rounded-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="card-title mb-0 text-primary">
                    <i class="fa-solid fa-list me-2"></i>Son Siparişler
                </h5>
            </div>
            <div class="card-body p-4 p-md-5">
                <!-- Filtreleme Alanı -->
                <div class="row mb-4 align-items-center">
                    <div class="col-md-6 mb-2 mb-md-0">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fa-solid fa-search"></i></span>
                            <input type="text" id="searchInput" class="form-control"
                                placeholder="Sipariş No veya Kullanıcı Ara">
                        </div>
                    </div>
                    <div class="col-md-3 mb-2 mb-md-0">
                        <select id="statusFilter" class="form-select rounded-3">
                            <option value="">Tüm Durumlar</option>
                            @foreach (var status in Enum.GetValues(typeof(dotnet_store.Models.SiparisDurumu)))
                            {
                                <option value="@status.ToString()">@status</option>
                            }
                        </select>
                    </div>
                </div>
                <!-- Tablo -->
                <div class="table-responsive">
                    <table id="ordersTable" class="table table-hover">
                        <thead>
                            <tr>
                                <th>Sipariş No</th>
                                <th>Kullanıcı</th>
                                <th>Toplam</th>
                                <th>Tarih</th>
                                <th>Durum</th>
                                <th style="width: 120px;">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.Any())
                            {
                                foreach (var order in Model)
                                {
                                    <tr>
                                        <td>#@order.Id</td>
                                        <td>@order.AdSoyad (@order.Username)</td>
                                        <td>@order.ToplamFiyat.ToString("C")</td>
                                        <td>@order.SiparisTarihi.ToString("dd.MM.yyyy HH:mm")</td>
                                        <td>
                                            <span
                                                class="badge bg-@(order.Durum == dotnet_store.Models.SiparisDurumu.Hazirlaniyor ? "warning" : 
                                                                                                                    order.Durum == dotnet_store.Models.SiparisDurumu.KargoyaVerildi ? "info" : 
                                                                                                                    order.Durum == dotnet_store.Models.SiparisDurumu.TeslimEdildi ? "success" : "secondary")"
                                        data-status="@order.Durum.ToString()">
                                        @order.Durum
                                    </span>
                                </td>
                                <td>
                                    <a asp-controller="Order" asp-action="Details" asp-route-id="@order.Id"
                                        class="btn btn-sm btn-outline-primary me-1">
                                        <i class="fa-solid fa-eye"></i> Detay
                                    </a>
                                    <a asp-controller="Order" asp-action="Edit" asp-route-id="@order.Id"
                                        class="btn btn-sm btn-outline-secondary">
                                        <i class="fa-solid fa-pen-to-square"></i> Düzenle
                                    </a>
                                </td>
                            </tr>
                                                        }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center">Sipariş bulunamadı.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" />
    <script>
        $(document).ready(function () {
            // DataTables başlat
            const table = $('#ordersTable').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json'
                },
                pageLength: 5,
                order: [[3, 'desc']], // Tarihe göre azalan
                columnDefs: [
                    { orderable: false, targets: 5 }, // İşlemler sıralanamaz
                    { searchable: false, targets: [2, 3, 5] } // Toplam, Tarih ve İşlemler aranamaz
                ]
            });

            // Arama için debounce fonksiyonu
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // Arama inputu (Sipariş No ve Kullanıcı için)
            $('#searchInput').on('keyup', debounce(function () {
                const searchValue = this.value.toLowerCase();
                console.log('Search term:', searchValue);
                table
                    .columns([0, 1]) // Sipariş No ve Kullanıcı sütunları
                    .search(searchValue)
                    .draw();
            }, 300));

            // Durum filtresi
            $('#statusFilter').on('change', function () {
                const status = this.value;
                console.log('Selected status:', status);
                table
                    .column(4)
                    .search(status ? '^' + status + '$' : '', true, false)
                    .draw();
            });
        });
    </script>
}

<style>
    /* Container */
    .container {
        max-width: 1200px;
        padding: 0 1rem;
    }

    /* Card */
    .card {
        border: none;
        border-radius: 1rem;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .card-header {
        background: #ffffff;
        border-radius: 1rem 1rem 0 0;
    }

    .card-body {
        padding: 1.5rem;
    }

    /* Text */
    .text-primary {
        color: #00aaff !important;
    }

    /* Table */
    .table {
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

    .table th {
        background: #f8f9fa;
        color: #1a1a1a;
        font-weight: 600;
    }

    .table td {
        vertical-align: middle;
        background: #ffffff;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .table-hover tbody tr:hover {
        background: rgba(0, 170, 255, 0.05);
    }

    /* Buttons */
    .btn-primary {
        background: #00aaff;
        border: none;
        border-radius: 0.75rem;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: #0088cc;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 136, 204, 0.3);
    }

    .btn-outline-primary {
        border-color: #00aaff;
        color: #00aaff;
    }

    .btn-outline-primary:hover {
        background: #00aaff;
        color: #ffffff;
    }

    .btn-outline-secondary {
        border-color: #6c757d;
        color: #6c757d;
    }

    .btn-outline-secondary:hover {
        background: #6c757d;
        color: #ffffff;
    }

    /* Badges */
    .badge.bg-warning {
        background: #ffc107 !important;
        color: #1a1a1a;
    }

    .badge.bg-info {
        background: #17a2b8 !important;
        color: #ffffff;
    }

    .badge.bg-success {
        background: #28a745 !important;
        color: #ffffff;
    }

    .badge.bg-secondary {
        background: #6c757d !important;
        color: #ffffff;
    }

    /* Form Elements */
    .form-control,
    .form-select {
        border-radius: 0.5rem;
        border: 1px solid #ced4da;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #00aaff;
        box-shadow: 0 0 0 0.2rem rgba(0, 170, 255, 0.25);
    }

    .input-group-text {
        background: #f8f9fa;
        border-radius: 0.5rem 0 0 0.5rem;
    }

    /* Mobile View */
    @@media (max-width: 768px) {
        .container {
            padding: 0 0.75rem;
        }

        .card {
            margin: 0 -0.75rem;
            border-radius: 0;
        }

        .card-body {
            padding: 1rem;
        }

        .table-responsive {
            font-size: 0.9rem;
        }

        .btn {
            font-size: 0.85rem;
            padding: 0.5rem 0.75rem;
        }
    }
</style>